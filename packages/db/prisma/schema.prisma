// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file (schema.prisma)
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Wallet   Wallet[]
  Order    Order[]
  Trade    Trade[]
  Transaction Transaction[]
}

model Wallet {
  id        Int       @id @default(autoincrement())
  userId    Int
  currency  Currency  @default(USD)
  balance   Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  tradeId     Int?
  type        OrderType
  status      OrderStatus
  currency    Currency
  amount      Float
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  trade       Trade?    @relation(fields: [tradeId], references: [id])
}

model Trade {
  id          Int       @id @default(autoincrement())
  buyOrderId  Int
  sellOrderId Int
  amount      Float
  price       Float
  createdAt   DateTime  @default(now())

  buyOrder    Order     @relation("BuyOrder", fields: [buyOrderId], references: [id])
  sellOrder   Order     @relation("SellOrder", fields: [sellOrderId], references: [id])
}

model Transaction {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        TransactionType
  currency    Currency
  amount      Float
  status      TransactionStatus
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Currency {
  USD
  BTC
  ETH
  USDT
  // Add more currencies as needed
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
